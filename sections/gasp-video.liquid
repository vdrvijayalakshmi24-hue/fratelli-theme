{% comment %}
sections/scrolly-video-fixed-2.liquid
Hard-coded Shopify section that scrubs video on scroll using scrolly-video,
but with manual scroll -> progress mapping to avoid theme/positioning issues.

Drop into sections/ and add to a page.
{% endcomment %}

<section id="scrolly-video-fixed-2-section" class="scrolly-video-fixed-2-section">
  <style>
    /* Parent section provides the scroll track */
    .scrolly-video-fixed-2-section {
      width: 100%;
      /* Increase track if you want slower scrub per scroll distance */
      height: 200vh; /* 3 viewports of vertical scroll */
      position: relative;
      background: #000;
    }

    /* Sticky wrapper that stays 100vh in viewport */
    .scrolly-video-fixed-2-wrapper {
      position: sticky;
      top: 0;
      height: 100vh; /* hard-coded 100vh video */
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      z-index: 1;
      background: #000;
    }

    /* Mount point for the library */
    #scrolly-video-fixed-2-container {
      width: 100%;
      height: 100%;
      position: relative;
    }

    /* Loading label */
    .scrolly-video-fixed-2-loading {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      color: #fff;
      font-size: 14px;
      z-index: 50;
      pointer-events: none;
      opacity: 0.95;
    }

    /* overlay text */
    .scrolly-video-fixed-2-overlay {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: none;
      z-index: 60;
    }

    .scrolly-video-fixed-2-overlay .text {
      color: #ffffff;
      text-shadow: 0 6px 18px rgba(0,0,0,0.6);
      font-size: 22px;
      max-width: 90%;
      text-align: center;
    }

    @media (max-width: 768px) {
      .scrolly-video-fixed-2-overlay .text { font-size: 16px; }
    }

    /* Ensure no global overflow:hidden breaks sticky */
    html, body {
      /* don't force these in your theme but if sticky still fails, check if theme's CSS
         sets 'overflow' on html/body or parent wrappers. */
    }
  </style>

  <div class="scrolly-video-fixed-2-wrapper">
    <div id="scrolly-video-fixed-2-container"></div>

    <div class="scrolly-video-fixed-2-loading" id="scrolly-video-fixed-2-loading">
      Loading video...
    </div>

    <div class="scrolly-video-fixed-2-overlay">
      <div class="text">Scroll to scrub the video</div>
    </div>
  </div>

  <!-- scrolly-video library from CDN -->
  <script defer src="https://cdn.jsdelivr.net/npm/scrolly-video@latest/dist/scrolly-video.js"></script>

  <script>
    (function () {
      // Hard-coded video url
      var VIDEO_SRC = 'https://cdn.shopify.com/videos/c/o/v/aa8ea38fecb6431ebc55c842becc04eb.mp4';
      var CONTAINER_ID = 'scrolly-video-fixed-2-container';
      var LOADING_ID = 'scrolly-video-fixed-2-loading';
      var SECTION_ID = 'scrolly-video-fixed-2-section';

      var loadingEl = document.getElementById(LOADING_ID);
      var sectionEl = document.getElementById(SECTION_ID);
      var containerEl = document.getElementById(CONTAINER_ID);

      // library instance (populated after init)
      var scrollyInstance = null;

      // defensive timeout for script load
      function whenLibraryReady(cb) {
        var tries = 0;
        (function waitLoop() {
          if (typeof ScrollyVideo !== 'undefined') return cb();
          tries += 1;
          if (tries > 200) { // ~10s at 50ms intervals
            console.error('scrolly-video script did not load');
            if (loadingEl) loadingEl.textContent = 'Video library failed to load';
            return;
          }
          setTimeout(waitLoop, 50);
        })();
      }

      // init lib with minimal options (we won't rely on its trackScroll/sticky)
      function initScrollyVideo() {
        try {
          scrollyInstance = new ScrollyVideo({
            scrollyVideoContainer: CONTAINER_ID,
            src: VIDEO_SRC,
            sticky: false,      // disable library sticky so we handle scroll mapping ourselves
            trackScroll: false, // disable library's internal scroll tracking
            cover: true,
            full: false,
            transitionSpeed: 8,
            frameThreshold: 0.05,
            useWebCodecs: true,
            debug: false,
            onReady: function(inst) {
              // hide loading
              if (loadingEl) loadingEl.style.display = 'none';
              console.info('scrolly-video ready', inst);
            },
            onChange: function(pct) {
              // library-level change, optional
            }
          });

          // expose for debugging
          window._scrollyVideoFixed2 = scrollyInstance;

          // if scrollyInstance has setVideoPercentage method, we'll use it below.
          if (typeof scrollyInstance.setVideoPercentage !== 'function') {
            console.warn('scrolly-video instance missing setVideoPercentage â€” attempting fallback to setVideoProgress / setPercentage');
          }
        } catch (err) {
          console.error('scrolly-video init error', err);
          if (loadingEl) loadingEl.textContent = 'Video failed to initialize';
        }
      }

      // calculate scroll progress (0..1) for this section and call instance setter
      var ticking = false;
      function updateProgress() {
        ticking = false;
        if (!sectionEl || !scrollyInstance) return;

        var rect = sectionEl.getBoundingClientRect();
        var vpH = window.innerHeight || document.documentElement.clientHeight;

        // We want the progress to be 0 when the top of section enters the viewport,
        // and 1 when we've scrolled through (sectionHeight - viewportHeight).
        // Using section.scrollHeight minus viewport height gives the total track.
        var sectionHeight = sectionEl.offsetHeight;
        var maxScroll = Math.max(sectionHeight - vpH, 1); // avoid division by 0
        // compute how many pixels we've scrolled into the section:
        // when section is at top, pageYOffset + sectionTop = currentScrollPosition
        // simplest: compute distance from top of section to top of viewport:
        var scrolledInto = Math.min(Math.max(vpH - rect.top, 0), vpH + maxScroll); // clamp

        // better: compute exact top offset relative to document:
        var docTop = window.pageYOffset || document.documentElement.scrollTop;
        var sectionTop = docTop + rect.top;
        var current = docTop - sectionTop + 0; // pixels scrolled within section
        // clamp current to 0..maxScroll
        current = Math.max(0, Math.min(current, maxScroll));

        var progress = current / maxScroll;
        progress = Math.max(0, Math.min(1, progress)); // safety clamp

        // call library setter. prefer setVideoPercentage API
        try {
          if (typeof scrollyInstance.setVideoPercentage === 'function') {
            scrollyInstance.setVideoPercentage(progress);
          } else if (typeof scrollyInstance.setVideoProgress === 'function') {
            scrollyInstance.setVideoProgress(progress);
          } else if (typeof scrollyInstance.setPercentage === 'function') {
            scrollyInstance.setPercentage(progress);
          } else if (scrollyInstance.video && typeof scrollyInstance.video.currentTime !== 'undefined') {
            // last resort: set currentTime proportionally (may be choppy depending on encoding)
            var dur = scrollyInstance.video.duration || 1;
            scrollyInstance.video.currentTime = progress * dur;
          } else {
            // nothing we can call
          }
        } catch (e) {
          console.error('Error setting video percentage', e);
        }

        // debug: one console.info every ~20 frames to avoid spam
        if (!updateProgress._ctr) updateProgress._ctr = 0;
        updateProgress._ctr += 1;
        if (updateProgress._ctr % 20 === 0) {
          console.debug('scrolly progress', progress);
        }
      }

      // RAF-driven scroll handler to reduce layout thrashing
      function onScroll() {
        if (!ticking) {
          window.requestAnimationFrame(updateProgress);
          ticking = true;
        }
      }

      // wire events
      function wireScroll() {
        window.addEventListener('scroll', onScroll, { passive: true });
        window.addEventListener('resize', onScroll, { passive: true });
        // initial call to set correct position
        onScroll();
      }

      // bootstrap
      whenLibraryReady(function() {
        initScrollyVideo();
        wireScroll();
      });

      // safety: if DOMContentLoaded hasn't fired, init when ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
          // trigger an initial progress update after load
          setTimeout(onScroll, 50);
        });
      }
    })();
  </script>
</section>
