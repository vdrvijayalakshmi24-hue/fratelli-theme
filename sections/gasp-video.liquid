{% comment %}
  sections/first-video-and-content.liquid
  - Canvas-based video scrub section (user's FirstVideo) + content (FullSceenVideoContent).
  - Video src: {{ 'Video_2.mp4' | asset_url }} (hardcoded example url in <source>)
  - TRACK_VH = 250 (section height).
  - STEP = 1/30 (30 fps).
  - Schema max_blocks: 1.
{% endcomment %}

<section id="first-video-section-{{ section.id }}" class="first-video-section" data-section-id="{{ section.id }}">
  <style>
    /* ---------- Layout / scrub section ---------- */
    .first-vd-wrapper {
      position: relative;
      height: 200vh; /* TRACK_VH */
      width: 100%;
      overflow: visible;
      box-sizing: border-box;
      background: #000;
    }

    .first-vd-pin {
      position: absolute; /* JS toggles absolute/fixed for reliable pin */
      top: 0;
      left: 0;
      right: 0;
      height: 100vh;
      width: 100%;
      z-index: 0;
      overflow: hidden;
      display: block;
      background: #000;
    }

    .first-vd-canvas {
      width: 100%;
      height: 100%;
      display: block;
      object-fit: cover;
      background: #000;
      image-rendering: auto;
    }

    .first-vd-video-decoder {
      position: absolute;
      opacity: 0;
      pointer-events: none;
      width: 1px;
      height: 1px;
      left: -9999px;
      top: -9999px;
    }

    /* spacer to ensure page can scroll */
    .first-vd-spacer {
      height: 1px;
    }

    /* ---------- Content area (converted from FullSceenVideoContent / Tailwind) ---------- */
    /* Container for the content — scoped by section id in DOM rather than CSS only */
    .first-video-content {
      position: relative;
      z-index: 10;
      box-sizing: border-box;
      width: 100%;
      overflow: hidden;
      padding: 0 20px;
    }

    .jason {
      position: relative;
      z-index: 10;
      margin-top: 5rem; /* fallback vertical spacing if JS not applied */
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
      overflow-x: hidden;
      width: 100%;
      box-sizing: border-box;
      color: #FFFFF8;
      transform: translateY(40px); /* initial state */
      opacity: 0;                  /* initial state */
    }

    @media (max-width: 768px) {
      .jason h1 {
        margin-top: 0 !important;
      }
    }

    /* Mobile styles */
    @media (max-width: 1023px) {
      .jason img {
        min-width: auto;
        max-width: 100%;
        height: auto;
      }
      .jason h1 {
        margin-top: 0rem;
      }
    }

    /* Desktop styles */
    @media (min-width: 1024px) {
      .jason {
        flex-direction: row;
      }
      .first-video-content {
        padding: 0;
      }
      .jason img {
        min-width: 700px;
      }
    }

    .jason-content {
      max-width: 56rem; /* max-w-3xl approx */
      margin-bottom: 2.5rem;
    }

    .jason h1 {
      font-family: "Utile", sans-serif;
      text-transform: uppercase;
      color: #F4CF80;
      font-size: 48px;
      margin-top: 6rem;
    }

    .jason h2 {
      font-family: "Playfair Display", serif;
      margin-bottom: 1.75rem;
      padding-right: 5rem;
      color: #FFFFF8;
      font-size: 32px;
      font-style: italic;
      letter-spacing: -0.06em;
    }

    .jason p {
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      padding-right: 7rem;
      color: #FFFFF8;
      font-size: 20px;
      letter-spacing: -0.04em;
    }

    .explore-btn {
      background: #fff;
      color: #000;
      border: none;
      padding: 0.625rem 1.25rem;
      border-radius: 20px;
      font-weight: 600;
      cursor: pointer;
    }

    /* Background gradient variations used in the React component */
    .content-1 {
      position: relative;
      display: block;
      background: linear-gradient(0deg, #181B0E 74.46%, rgba(0, 0, 0, 0) 100%);
      -webkit-mask-image: linear-gradient(to bottom, transparent 0%, black 30%, black 100%);
      mask-image: linear-gradient(to bottom, transparent 0%, black 15%, black 100%);
      box-sizing: border-box;
    }

    /* small helper for the image if provided */
    .full-image {
      width: 100%;
      height: 100vh;
      object-fit: cover;
      display: block;
    }
  </style>

  <!-- ========== Scrub section (canvas + hidden video) ========== -->
  <section
    class="first-vd-wrapper"
    id="first-vd-wrapper-{{ section.id }}"
    data-track-vh="250"
    >
    <div class="first-vd-pin" id="first-vd-pin-{{ section.id }}">
      <canvas id="first-vd-canvas-{{ section.id }}" class="first-vd-canvas" role="img" aria-label="Video scrub"></canvas>
      <video
        id="first-vd-video-{{ section.id }}"
        class="first-vd-video-decoder"
        muted
        playsinline
        preload="auto"
        webkit-playsinline
        x-webkit-airplay="allow"
      >
        <!-- hardcoded mp4 source example; replace with your asset_url if required -->
        <source src="https://cdn.shopify.com/videos/c/o/v/aa8ea38fecb6431ebc55c842becc04eb.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    </div>

    <div class="first-vd-spacer" aria-hidden="true"></div>
  </section>

  <!-- ========== Content area (converted from FullSceenVideoContent) ========== -->
  <section class="first-video-content content-1" id="first-video-content-{{ section.id }}">
    <div class="jason" id="jason-{{ section.id }}">
      <div class="json-image" style="opacity: 1;">
        <img src="https://cdn.shopify.com/s/files/1/0491/6628/7016/files/Section_1.jpg?v=1758619356" alt="Fratelli Wines" width="700" height="532" style="object-fit: cover; margin-top: 6rem;" loading="lazy">
      </div>
      <div class="jason-content">
        <h1 id="jason-h1-{{ section.id }}">India’s finest Wine Makers</h1>
        {% comment %} <h2 id="jason-h2-{{ section.id }}">From Akluj's Soil</h2> {% endcomment %}
        <p id="jason-p-{{ section.id }}">
          From the heart of Akluj to tables across the world, Fratelli is more than wine, it’s a story of heritage, craftsmanship and seven brothers bound by a dream. Every bottle is a testament to passion and the spirit of Pour More Into Life.
        </p>

        <div style="margin-top: 1.25rem;">
          <button type="button" class="explore-btn" id="jason-btn-{{ section.id }}">Explore</button>
        </div>
      </div>
    </div>
  </section>

  <script>
    (function () {
      var sectionId = '{{ section.id }}';

      /* ------------------- Utility loader ------------------- */
      function loadScriptOnce(src) {
        return new Promise(function (resolve, reject) {
          if (document.querySelector('script[src="' + src + '"]')) { resolve(); return; }
          var s = document.createElement('script');
          s.src = src;
          s.async = true;
          s.onload = resolve;
          s.onerror = reject;
          document.head.appendChild(s);
        });
      }

      /* ------------------- GSAP-powered video scrub ------------------- */
      (function gsapVideoScrub() {
        var wrapper = document.getElementById('first-vd-wrapper-' + sectionId);
        var pin = document.getElementById('first-vd-pin-' + sectionId);
        var canvas = document.getElementById('first-vd-canvas-' + sectionId);
        var video = document.getElementById('first-vd-video-' + sectionId);
        if (!wrapper || !pin || !canvas || !video) return;

        // ensure video does not loop
        try { video.loop = false; } catch (e) {}

        var ctx = canvas.getContext('2d', { alpha: false, desynchronized: true });
        var duration = 0;
        var raf = null;
        var pendingSeek = null;
        var isSeeking = false;

        function clamp(v, a, b) { return Math.min(b, Math.max(a, v)); }

        function drawFrame() {
          try { ctx.drawImage(video, 0, 0, canvas.width, canvas.height); } catch (e) {}
        }

        function onSeeked() {
          // draw the frame for the newly-seeked time
          drawFrame();
          isSeeking = false;
          if (pendingSeek !== null) {
            var next = pendingSeek;
            pendingSeek = null;
            seekTo(next);
          }
        }

        function seekTo(time) {
          // clamp and set seeking flag; use fastSeek when available for better performance
          var t = clamp(time, 0, Math.max(0, duration - 1e-6));
          isSeeking = true;
          try {
            if (typeof video.fastSeek === 'function') video.fastSeek(t);
            else video.currentTime = t;
          } catch (e) {
            // fallback: queue
            try { video.currentTime = t; } catch (e) {}
            isSeeking = false;
          }
        }

        function onResize() {
          // keep canvas sized to viewport/pin area - use video intrinsic for aspect if available
          var vw = pin.clientWidth || window.innerWidth;
          var vh = pin.clientHeight || window.innerHeight;
          // calculate canvas size preserving video's aspect ratio if we have it
          var vidW = video.videoWidth || vw;
          var vidH = video.videoHeight || vh;
          var vidRatio = vidW && vidH ? vidW / vidH : vw / vh;

          var canvasW = vw;
          var canvasH = Math.round(canvasW / vidRatio);

          // if canvas height smaller than viewport, expand by height
          if (canvasH < vh) {
            canvasH = vh;
            canvasW = Math.round(canvasH * vidRatio);
          }

          canvas.width = canvasW;
          canvas.height = canvasH;
          // center-draw via CSS object-fit like behavior is implicit when drawImage uses full canvas area
          drawFrame();
          // Refresh ScrollTrigger to recalc pin/end
          if (window.gsap && window.ScrollTrigger) {
            try { window.ScrollTrigger.refresh(); } catch (e) {}
          }
        }

        // measure and create ScrollTrigger once metadata available
        function createScrollTrigger() {
          if (!window.gsap || !window.ScrollTrigger) return;
          var gsap = window.gsap;
          var ScrollTrigger = window.ScrollTrigger;
          gsap.registerPlugin(ScrollTrigger);

          // make sure we have a valid duration
          duration = video.duration || 0;
          if (!duration || !isFinite(duration)) duration = 0;

          // set canvas initial size
          onResize();

          // compute track length: wrapper.offsetHeight - viewport (so pinned for that amount)
          var trackLength = Math.max(0, wrapper.offsetHeight - window.innerHeight);

          // Ensure any existing ScrollTrigger for this wrapper is killed
          ScrollTrigger.getAll().forEach(function (st) {
            if (st.trigger === wrapper || st.trigger === pin) {
              try { st.kill(); } catch (e) {}
            }
          });

          // Create ScrollTrigger that pins the video and scrubs the playhead
          gsap.to({}, {
            // dummy tween; we will use onUpdate to drive video currentTime
            ease: "none",
            duration: 1,
            scrollTrigger: {
              trigger: wrapper,
              start: "top top",
              end: "+=" + trackLength,
              scrub: true,
              pin: pin,
              // anticipate for smoother pin behavior
              invalidateOnRefresh: true,
              onUpdate: function (self) {
                // self.progress is 0..1 across the trackLength
                var p = clamp(self.progress, 0, 1);
                var targetTime = p * duration;
                // round to frame-step for consistent seeking (30fps)
                var STEP = 1 / 30;
                var rounded = Math.round(targetTime / STEP) * STEP;
                // if currently seeking, queue
                if (isSeeking) {
                  pendingSeek = rounded;
                } else {
                  seekTo(rounded);
                }
              },
              onRefresh: function () {
                // on refresh recalc layout if needed
                onResize();
              }
            }
          });

          // make sure we seek to 0 initially and render first frame
          if (duration > 0) seekTo(0);
        }

        // Video event listeners
        function onLoadedMeta() {
          duration = video.duration || 0;
          onResize();
          // decode first frame by attempting to play briefly and pause -- many browsers require a play to make frames available
          // but we will not leave it playing
          try {
            var p = video.play();
            if (p && typeof p.then === 'function') {
              p.then(function () { try { video.pause(); } catch (e) {} }).catch(function () {});
            } else {
              try { video.pause(); } catch (e) {}
            }
          } catch (e) {}
          // ensure we have the draw from 0
          seekTo(0);
          // attach seeked -> draw
          video.addEventListener('seeked', onSeeked);
          // create ScrollTrigger now that we have metadata
          createScrollTrigger();
        }

        // setup listeners and initial measure
        window.addEventListener('resize', onResize);
        video.addEventListener('loadedmetadata', onLoadedMeta);

        // If metadata already loaded, run immediately
        if (video.readyState >= 1 && video.duration) {
          onLoadedMeta();
        } else {
          try { video.load(); } catch (e) {}
        }

        // Cleanup for single-page editors / Shopify section events
        function cleanup() {
          try { video.removeEventListener('loadedmetadata', onLoadedMeta); } catch (e) {}
          try { video.removeEventListener('seeked', onSeeked); } catch (e) {}
          try { window.removeEventListener('resize', onResize); } catch (e) {}
          if (raf) cancelAnimationFrame(raf);
          // kill ScrollTrigger instances we created for this wrapper/pin
          if (window.gsap && window.ScrollTrigger) {
            try {
              window.ScrollTrigger.getAll().forEach(function (st) {
                if (st.trigger === wrapper || st.trigger === pin) {
                  try { st.kill(); } catch (e) {}
                }
              });
            } catch (e) {}
          }
        }

        if (window.Shopify && window.Shopify.designMode) {
          window.addEventListener('shopify:section:unload', cleanup);
          window.addEventListener('shopify:section:load', function () { setTimeout(function(){ if (video.readyState >= 1) onLoadedMeta(); else try{video.load();}catch(e){} }, 60); });
        }
        window.addEventListener('pagehide', cleanup);
        window.addEventListener('beforeunload', cleanup);
      })();

      /* ------------------- Content GSAP animations (fix for jason) ------------------- */
      (function contentGSAP() {
        var contentSection = document.getElementById('first-video-content-' + sectionId);
        if (!contentSection) return;

        // find elements scoped to this section
        var jason = contentSection.querySelector('#jason-' + sectionId) || contentSection.querySelector('.jason');
        var content1 = contentSection.classList.contains('content-1') ? contentSection : contentSection.querySelector('.content-1') || contentSection;
        var hasImage = !!contentSection.querySelector('.full-image');

        // load gsap + ScrollTrigger if needed
        function loadScript(src) {
          return new Promise(function (resolve, reject) {
            if (document.querySelector('script[src="' + src + '"]')) return resolve();
            var s = document.createElement('script');
            s.src = src;
            s.onload = resolve;
            s.onerror = reject;
            document.head.appendChild(s);
          });
        }

        var GSAP_CDN = "https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js";
        var SCROLLTRIGGER_CDN = "https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js";

        function init() {
          if (!window.gsap || !window.ScrollTrigger) return console.warn('GSAP/ScrollTrigger not available for content animation.');
          gsap.registerPlugin(ScrollTrigger);

          // set initial marginTop similar to original React logic
          var initialMargin = hasImage ? '-15vh' : '-62vh';
          // apply as inline style so it doesn't conflict with other pages
          try { content1.style.marginTop = initialMargin; } catch (e) {}

          // make sure jason has starting state for animation
          try {
            gsap.set(jason, { y: 40, opacity: 0 });
          } catch (e) {}

          // animate jason into place while scrolling
          try {
            gsap.to(jason, {
              y: 0,
              opacity: 1,
              duration: 1,
              ease: "power1.inOut",
              scrollTrigger: {
                trigger: content1,
                start: "top 90%",
                end: "100% center",
                scrub: 2,
                // markers: true // enable for debugging
              }
            });
          } catch (e) {
            console.warn('jason animation error', e);
          }
        }

        // load scripts then init
        if (window.gsap && window.ScrollTrigger) {
          init();
        } else {
          loadScript(GSAP_CDN)
            .then(function () { return loadScript(SCROLLTRIGGER_CDN); })
            .then(function () { setTimeout(init, 40); })
            .catch(function (err) { console.error('Failed to load GSAP for content animation', err); });
        }

      })();
    })();
  </script>

  {% schema %}
  {
    "name": "First Video Canvas Scrub",
    "settings": [],
    "blocks": [],
    "max_blocks": 1,
    "presets": [
      {
        "name": "First Video Canvas Scrub"
      }
    ]
  }
  {% endschema %}
</section>
