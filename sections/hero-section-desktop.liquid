{% comment %}
  sections/hero-video-autoplay.liquid
  - Fullscreen (100vh) hero video with autoplay (muted, playsinline, loop).
  - Centered play/pause icon (no text).
  - Auto-pause when off-viewport; auto-play when in-viewport.
  - Manual click disables auto start/stop afterward.
  - Loading overlay: black translucent page cover with pulsing SVG (heartbeat).
    On ready, SVG scales out (burst) and overlay hides.
{% endcomment %}

<section id="hero-video-autoplay-{{ section.id }}" class="hero-video-autoplay-section is-loading" data-section-id="{{ section.id }}">
    <style>
      #hero-video-autoplay-{{ section.id }} {
        position: relative;
        width: 100%;
        height: 100vh; /* Full viewport height */
        overflow: hidden;
        background: #000;
      }
  
      #hero-video-autoplay-{{ section.id }} .hero-video-wrapper {
        position: relative;
        width: 100%;
        height: 100%;
      }
  
      /* Video fills container */
      #hero-video-autoplay-{{ section.id }} .hero-video {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
        background: #000;
      }
  
      /* Center overlay play/pause button */
      #hero-video-autoplay-{{ section.id }} .video-toggle {
        position: absolute;
        inset: 0;
        display: grid;
        place-items: center;
        pointer-events: none;
        z-index: 3;
      }
      #hero-video-autoplay-{{ section.id }} .video-toggle__btn {
        pointer-events: auto;
        border: none;
        outline: none;
        padding: 1rem;
        border-radius: 50%;
        background: rgba(0,0,0,0.55);
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        backdrop-filter: blur(2px);
        transition: transform 160ms ease, background 160ms ease;
      }
      #hero-video-autoplay-{{ section.id }} .video-toggle__btn:hover { transform: scale(1.1); background: rgba(0,0,0,0.7); }
      #hero-video-autoplay-{{ section.id }} .video-toggle__icon { display: inline-block; font-size: 2rem; line-height: 1; }
  
      /* --- Loading Overlay --- */
      #hero-video-autoplay-{{ section.id }} .loading-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.82); /* black with less opacity */
        display: grid;
        place-items: center;
        z-index: 10; /* above everything until hidden */
        pointer-events: none; /* allow no interaction while visible */
        opacity: 1;
        visibility: visible;
      }
      #hero-video-autoplay-{{ section.id }} .loading-inner {
        width: clamp(56px, 9vw, 112px);
        aspect-ratio: 41 / 48; /* matches SVG viewBox for crisp scaling */
        display: grid;
        place-items: center;
        transform-origin: center;
        animation: hero-{{ section.id }}-heartbeat 1.1s ease-in-out infinite;
        will-change: transform, opacity;
      }
      /* Heartbeat pulse while loading */
      @keyframes hero-{{ section.id }}-heartbeat {
        0%   { transform: scale(1); }
        15%  { transform: scale(1.12); }
        30%  { transform: scale(0.96); }
        45%  { transform: scale(1.10); }
        60%  { transform: scale(1.00); }
        100% { transform: scale(1); }
      }
  
      /* On "loaded", burst the SVG then hide overlay */
      #hero-video-autoplay-{{ section.id }}.is-loaded .loading-inner {
        animation: hero-{{ section.id }}-burst 3s ease-out forwards;
      }
      @keyframes hero-{{ section.id }}-burst {
        0%   { transform: scale(1); opacity: 1; }
        5%   { transform: scale(5); opacity: 1; }
        10%   { transform: scale(10); opacity: 1; }
        15%   { transform: scale(15); opacity: 1; }
        20%   { transform: scale(20); opacity: 1; }
        25%   { transform: scale(25); opacity: 1; }
        30%  { transform: scale(30); opacity: 1; }
        35%  { transform: scale(35); opacity: 1; }
        40%  { transform: scale(40); opacity: 1; }
        45%  { transform: scale(45); opacity: 1; }
        50%  { transform: scale(50); opacity: 1; }
        55%  { transform: scale(55); opacity: 1; }
        60%  { transform: scale(60); opacity: 1; }
        65%  { transform: scale(65); opacity: 1; }
        70%  { transform: scale(70); opacity: 1; }
        75%  { transform: scale(75); opacity: 1; }
        80%  { transform: scale(80); opacity: 1; }
        85%  { transform: scale(85); opacity: 1; }
        90%  { transform: scale(90); opacity: 1; }
        95%  { transform: scale(95); opacity: 1; }
        100%  { transform: scale(100); opacity: 0; }
      }
      #hero-video-autoplay-{{ section.id }}.is-loaded .loading-overlay {
        animation: hero-{{ section.id }}-overlayFade 3s ease-out forwards;
      }
      @keyframes hero-{{ section.id }}-overlayFade {
        to { opacity: 0; visibility: hidden; }
      }
  
      /* Respect reduced motion */
      @media (prefers-reduced-motion: reduce) {
        #hero-video-autoplay-{{ section.id }} .loading-inner,
        #hero-video-autoplay-{{ section.id }}.is-loaded .loading-inner {
          animation: none;
          transform: none;
        }
        #hero-video-autoplay-{{ section.id }}.is-loaded .loading-overlay {
          animation: none;
          opacity: 0; visibility: hidden;
        }
      }
    </style>
  
    <div class="hero-video-wrapper">
      <!-- Video -->
      <video id="BrandVideo" class="hero-video" autoplay muted playsinline preload="auto" aria-label="Brand video">
        <source src="{{ 'Brand_Video.mp4' | asset_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
  
      <!-- Center overlay play/pause control -->
      <div class="video-toggle">
        <button type="button" class="video-toggle__btn" aria-label="Pause video" aria-pressed="false" data-role="toggle">
          <span class="video-toggle__icon" data-icon="pause" aria-hidden="true">❚❚</span>
          <span class="video-toggle__icon" data-icon="play"  aria-hidden="true" style="display:none;">▶</span>
        </button>
      </div>
  
      <!-- Loading overlay with heartbeat SVG -->
      <div class="loading-overlay" aria-hidden="true">
        <div class="loading-inner">
          <!-- Using your SVG exactly (light fill stands out on black overlay) -->
          <svg width="41" height="48" viewBox="0 0 41 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.7981 0H7.92292C7.57595 0 7.36096 0.496798 7.66921 0.654799C8.08653 0.868611 11.2046 2.16249 11.2046 5.26905C11.2046 8.37561 11.2227 16.9973 11.237 19.7918C11.2219 22.5862 11.2046 29.6798 11.2046 32.6763C11.2046 36.5265 8.86505 37.5452 7.79804 38.4932C7.5388 38.7235 7.70399 39.148 8.05096 39.148H11.7973C13.1924 39.148 14.3234 38.0232 14.3234 36.6357V4.64648C14.3234 3.25906 14.3439 0 11.7981 0Z" fill="#FFFFF8"/>
            <path d="M35.7362 0.485007C35.1616 2.10196 34.5847 5.44434 34.0077 7.06208C33.9113 7.33721 33.539 7.37966 33.3825 7.13519C32.7937 6.2147 31.65 4.62683 29.5982 4.04356C28.4347 3.7142 21.8817 2.56103 19.807 4.854C19.5067 5.18494 19.2941 5.54496 19.1391 5.89948C19.1178 5.9435 19.1004 5.99224 19.0814 6.04019C19.0799 6.05198 19.0759 6.06298 19.0735 6.07713C19.0577 6.11172 19.0467 6.15181 19.0364 6.19111C19.0206 6.24142 19.0056 6.2933 18.9937 6.34676C18.9178 6.62581 18.8546 6.92059 18.804 7.22873C18.7882 7.31913 18.7732 7.41582 18.7613 7.50779C18.7455 7.60212 18.7345 7.69487 18.7242 7.78684C18.7068 7.90397 18.6949 8.02188 18.6855 8.14136C18.6799 8.2011 18.6736 8.26478 18.6697 8.32845C18.6641 8.40941 18.6578 8.49431 18.6562 8.57685C18.6428 8.80009 18.6372 9.02569 18.6372 9.25837C18.6372 10.2921 18.6357 11.8862 18.6317 13.1164C18.6317 13.3397 18.6317 13.5653 18.6301 13.7901C18.6301 14.5793 18.6262 15.3748 18.6207 16.1522C18.6207 16.4855 18.6207 16.8125 18.6167 17.1325V17.5499C18.6151 18.3603 18.6088 19.1212 18.6048 19.7925C18.6064 20.0504 18.6064 20.3357 18.6088 20.6439C19.5731 19.0285 21.3309 16.7512 23.6783 16.5138C27.0658 16.1695 29.2883 17.9099 31.8729 17.149C31.8958 17.1372 31.9171 17.1293 31.9369 17.1262C32.1637 17.0688 32.1574 17.373 32.1108 17.4941C32.1108 17.4941 32.1103 17.4954 32.1092 17.498C32.1052 17.5098 32.0973 17.5192 32.0918 17.5287C31.2595 18.6339 29.3682 20.8404 27.2468 21.312C27.1638 21.3309 27.08 21.3466 26.9971 21.3584C26.937 21.3678 26.8793 21.3757 26.8192 21.3812C26.771 21.3867 26.7228 21.3906 26.6738 21.3946C26.6003 21.4001 26.5268 21.4024 26.4533 21.4024C26.3893 21.4024 26.3252 21.4009 26.262 21.3969C23.3431 21.2311 20.648 19.7179 18.6175 22.6468C18.6293 25.6291 18.6388 29.4337 18.6388 31.6182C18.6388 35.5321 20.3231 37.6136 21.3893 38.5396C21.6312 38.7511 21.4763 39.1496 21.153 39.1496H18.0445C16.651 39.1496 15.5184 38.0271 15.5184 36.6373V4.64569C15.5184 3.25749 15.2418 0 18.0445 0H22.2429C22.2429 0 22.2374 0.00157215 22.2335 0.00550251C25.4819 0.00707466 32.1606 0.0133632 35.4066 0.0188658C35.6485 0.0188658 35.8192 0.257832 35.7378 0.485007H35.7362Z" fill="#FFFFF8"/>
            <path d="M32.091 17.5279C31.2975 18.6598 29.3769 20.8467 27.246 21.3112C29.3674 20.8396 31.2588 18.6331 32.091 17.5279Z" fill="#FFFFF8"/>
            <path d="M32.1108 17.4933C32.1574 17.3722 32.1629 17.068 31.9369 17.1254C32.1772 17.0562 32.1882 17.3408 32.1108 17.4933Z" fill="#FFFFF8"/>
            <path d="M9.02945 41.9087L9.21439 42.1092C12.2811 42.4629 15.0568 45.9043 17.5679 47.2509C20.78 48.9732 24.622 47.2273 24.015 46.9341C22.9069 46.3988 20.3358 44.0012 17.7655 44.4957C17.7655 44.4957 20.1951 43.3692 19.7809 42.3261C19.7809 42.3261 18.9313 41.9527 17.6477 41.5904C16.7301 41.331 15.5896 41.0771 14.3795 40.9694C12.5861 40.8098 10.6379 40.9701 9.02945 41.9087Z" fill="#FFFFF8"/>
            <path d="M40.1402 16.9155C38.8859 20.9127 41.0618 25.2424 36.6752 28.5769C36.5013 28.7098 36.2476 28.5038 36.3093 28.2743C36.3282 28.2027 36.4737 27.86 36.4737 27.86C38.0299 23.164 35.3086 20.8868 35.2486 20.8404C35.266 20.8632 35.5023 21.1847 35.2833 21.6815C35.115 22.0643 34.7143 22.2915 34.0638 22.124C32.8 21.7986 33.1968 19.5151 35.0375 19.9215C35.8058 20.0928 36.5242 20.8435 37.0625 22.0163C37.0878 20.794 35.756 19.3673 34.0677 17.8847C30.9805 15.1704 30.8991 11.6528 30.8991 11.6528C31.65 11.7337 33.505 12.4671 33.8125 12.9042C31.9693 7.7947 29.0892 8.27971 29.0892 8.27971C29.0892 8.27971 29.7958 8.66253 29.6567 9.63333C29.5326 10.4957 29.105 11.031 27.94 11.0813C25.4756 11.1874 24.9294 7.16506 28.1937 6.91273C30.9774 6.69892 32.6735 8.53204 33.6741 10.781C33.8623 8.47623 35.2865 6.92845 37.2245 6.86321C37.3984 6.8577 37.532 7.07152 37.4608 7.24052C36.4887 9.539 37.6734 10.9083 36.6633 13.1707C36.7076 13.1227 38.4812 11.1552 38.512 11.8367C38.5697 13.0936 38.9863 15.3717 37.6315 17.4312C37.6932 17.3659 38.874 16.1121 39.9877 16.5744C40.1157 16.6262 40.1853 16.7827 40.1426 16.9155H40.1402Z" fill="#FFFFF8"/>
            <path d="M6.52317 31.4374C7.59333 30.2206 7.02426 28.6917 5.62846 28.4645C4.17812 28.2318 3.42964 29.2286 3.14668 29.8354C2.18242 31.9091 2.68194 34.7083 4.37414 37.3149C3.66912 35.7978 3.60984 34.1745 5.20087 33.0693C6.96657 31.8446 8.61766 33.9741 7.43289 35.0738C6.87172 35.5934 6.42042 35.547 5.95568 35.2067C5.43719 34.8238 5.58025 34.3168 5.58025 34.3168C5.58025 34.3168 3.30002 35.3568 6.83062 40.1794C7.00451 40.3374 7.18313 40.4914 7.3665 40.6431C7.50165 40.7548 7.46925 41.0244 7.28904 40.9049C3.05737 38.0821 0.823769 34.5149 0.370094 32.7667C-1.28337 26.3822 3.09215 18.9066 3.9007 13.4065C3.92046 13.287 4.06747 13.239 4.15204 13.3255C8.15371 17.3573 4.09592 21.9527 3.92204 22.1468C4.83018 21.4111 5.71856 21.3191 6.08846 21.3167C6.18726 21.3167 6.26471 21.3993 6.25681 21.496C6.04025 24.0334 4.39469 25.2039 4.29984 25.2691C4.42156 25.2463 6.88437 24.7747 8.07862 26.3838C9.96604 28.9251 8.24697 31.7322 6.64646 31.7228C6.49945 31.7228 6.42595 31.5459 6.52238 31.4359L6.52317 31.4374Z" fill="#FFFFF8"/>
            <path d="M5.13527 8.96595C4.97561 9.05006 4.95743 9.26781 5.09812 9.381C5.52966 9.72609 6.05605 10.3715 6.34296 11.7675C6.79901 13.9866 6.7421 16.6184 7.71663 18.6331C8.1221 19.4718 9.1069 20.5896 9.92336 21.1014C10.2055 21.2656 10.2585 21.1014 10.0988 20.8632C7.49533 17.7157 9.60405 12.6463 9.85618 9.35978C10.1146 5.99302 9.50604 4.14732 7.65657 2.86917C7.48268 2.7489 7.24557 2.88882 7.2677 3.09792C7.30959 3.48938 7.32303 4.08051 7.19182 4.81627C6.94444 6.19819 6.65516 8.36382 7.55461 9.38021C7.55461 9.38021 6.15959 8.42592 5.13606 8.96595H5.13527Z" fill="#FFFFF8"/>
            <path d="M26.9369 30.4735C28.4689 29.3799 28.9943 27.5007 28.1106 26.2762C27.2268 25.0516 25.2685 24.9455 23.7366 26.0391C22.2046 27.1327 21.6791 29.012 22.5629 30.2365C23.4467 31.461 25.405 31.5672 26.9369 30.4735Z" fill="#FFFFF8"/>
            <path d="M37.0917 29.4565C38.0781 28.8167 39.4399 29.2278 40.1331 30.3731C40.8263 31.5192 40.5883 32.9663 39.602 33.6062C38.6156 34.2461 37.2538 33.835 36.5606 32.6896C35.8674 31.5436 36.1053 30.0964 37.0917 29.4565Z" fill="#FFFFF8"/>
            <path d="M34.361 38.2032C33.2394 37.0579 32.9304 35.2947 33.6718 34.2657C34.4131 33.2368 35.9235 33.3319 37.0451 34.4772C38.1666 35.6225 38.4757 37.3857 37.7343 38.4146C36.9929 39.4436 35.4825 39.3485 34.361 38.2032Z" fill="#FFFFF8"/>
            <path d="M28.5968 39.0443C28.6948 37.2292 29.8171 35.874 31.1023 36.0179C32.3874 36.1617 33.3493 37.7496 33.2513 39.5646C33.1525 41.3797 32.031 42.7349 30.7458 42.591C29.4606 42.4472 28.4988 40.8593 28.5968 39.0443Z" fill="#FFFFF8"/>
            <path d="M23.9114 45.3588C22.7417 44.6309 22.4374 42.705 23.2333 41.0558C24.0284 39.4074 25.6218 38.6607 26.7923 39.3878C27.9621 40.1157 28.2664 42.0416 27.4705 43.6907C26.6746 45.3391 25.082 46.0859 23.9114 45.3588Z" fill="#FFFFF8"/>
            <path d="M32.8577 26.5449C34.4582 26.9694 35.3102 28.9715 34.7625 31.0177C34.214 33.0638 32.472 34.3781 30.8723 33.9544C29.2718 33.53 28.4197 31.5278 28.9675 29.4817C29.516 27.4355 31.258 26.1212 32.8577 26.5449Z" fill="#FFFFF8"/>
            <path d="M27.692 37.0397C28.9481 35.8056 29.0426 33.875 27.9029 32.7276C26.7633 31.5803 24.8211 31.6506 23.565 32.8847C22.3088 34.1188 22.2144 36.0494 23.354 37.1968C24.4937 38.3442 26.4358 38.2739 27.692 37.0397Z" fill="#FFFFF8"/>
          </svg>
        </div>
      </div>
    </div>
  
    <script>
        (function() {
          const sectionEl = document.getElementById('hero-video-autoplay-{{ section.id }}');
          if (!sectionEl) return;
      
          const video = sectionEl.querySelector('.hero-video');
          const toggleBtn = sectionEl.querySelector('[data-role="toggle"]');
          const iconPause = sectionEl.querySelector('[data-icon="pause"]');
          const iconPlay  = sectionEl.querySelector('[data-icon="play"]');
          const overlay   = sectionEl.querySelector('.loading-overlay');
          const overlayInner = sectionEl.querySelector('.loading-inner');
      
          let userInteracted = false;
      
          /* ---------- UI helpers ---------- */
          function syncUIFromState(isPlaying) {
            if (isPlaying) {
              iconPause.style.display = '';
              iconPlay.style.display = 'none';
              toggleBtn.setAttribute('aria-label', 'Pause video');
              toggleBtn.setAttribute('aria-pressed', 'false');
            } else {
              iconPause.style.display = 'none';
              iconPlay.style.display = '';
              toggleBtn.setAttribute('aria-label', 'Play video');
              toggleBtn.setAttribute('aria-pressed', 'true');
            }
          }
      
          function markLoadedAndHideOverlay() {
            sectionEl.classList.add('is-loaded');
            const done = () => { if (overlay) overlay.style.display = 'none'; };
            if (overlayInner) overlayInner.addEventListener('animationend', done, { once: true });
            setTimeout(done, 800); // safety for reduced motion / older browsers
          }
      
          function tryAutoplayIfVisible() {
            if (userInteracted) return;
            const r = video.getBoundingClientRect();
            const inViewport = r.top < window.innerHeight && r.bottom > 0 && r.height > 0;
            if (!inViewport) return;
            const p = video.play();
            if (p && typeof p.then === 'function') {
              p.then(() => syncUIFromState(true)).catch(() => syncUIFromState(false));
            } else {
              syncUIFromState(!video.paused);
            }
          }
      
          /* ---------- Manual toggle (disables auto behavior) ---------- */
          toggleBtn.addEventListener('click', function() {
            userInteracted = true;
            if (video.paused) {
              video.play().then(() => syncUIFromState(true)).catch(() => syncUIFromState(false));
            } else {
              video.pause();
              syncUIFromState(false);
            }
          });
      
          /* ---------- Viewport auto play/pause (unless user interacted) ---------- */
          const observer = new IntersectionObserver((entries) => {
            const entry = entries[0]; if (!entry) return;
            if (userInteracted) return;
            if (entry.isIntersecting && entry.intersectionRatio >= 0.25) {
              video.play().then(() => syncUIFromState(true)).catch(() => syncUIFromState(false));
            } else {
              video.pause(); syncUIFromState(false);
            }
          }, { threshold: [0, 0.25, 0.5, 0.75, 1] });
          observer.observe(video);
      
          document.addEventListener('visibilitychange', function() {
            if (userInteracted) return;
            if (document.hidden) {
              video.pause(); syncUIFromState(false);
            } else {
              tryAutoplayIfVisible();
            }
          });
      
          /* ---------- NEW: wait for ALL videos on the page ---------- */
          const ALL_VIDEOS_TIMEOUT_MS = 15000; // fallback so the page never gets stuck
      
          function waitUntilVideoReady(v) {
            return new Promise((resolve) => {
              // If already has enough data to play forward
              if (v.readyState >= 3 /* HAVE_FUTURE_DATA */) return resolve();
              const onReady = () => { cleanup(); resolve(); };
              const onErr   = () => { cleanup(); resolve(); }; // resolve on error to avoid blocking
              const cleanup = () => {
                v.removeEventListener('canplaythrough', onReady);
                v.removeEventListener('loadeddata', onReady);
                v.removeEventListener('error', onErr);
              };
              v.addEventListener('canplaythrough', onReady, { once: true });
              v.addEventListener('loadeddata', onReady, { once: true });
              v.addEventListener('error', onErr, { once: true });
            });
          }
      
          const allVideos = Array.from(document.querySelectorAll('video'));
          const allReadyPromise = Promise.race([
            Promise.all(allVideos.map(waitUntilVideoReady)),
            new Promise((res) => setTimeout(res, ALL_VIDEOS_TIMEOUT_MS))
          ]);
      
          // Keep UI state in sync
          video.addEventListener('play',  () => syncUIFromState(true));
          video.addEventListener('pause', () => syncUIFromState(false));
          video.addEventListener('error', () => { sectionEl.classList.add('is-loaded'); if (overlay) overlay.style.display = 'none'; });
      
          // When ALL page videos are ready (or timeout), burst & hide overlay, then autoplay if visible
          allReadyPromise.then(() => {
            // Stop heartbeat loop and run burst/fade
            sectionEl.classList.remove('is-loading');
            markLoadedAndHideOverlay();
            tryAutoplayIfVisible();
          });
        })();
      </script>
      
  </section>
  
  {% schema %}
  {
    "name": "Hero video",
    "settings": [
      {
        "type": "paragraph",
        "content": "Autoplaying hero video with viewport control and heartbeat loader overlay. Place your file in theme assets as 'Brand_Video.mp4'."
      }
    ],
    "presets": [
      { "name": "Hero video (fullscreen + loader)" }
    ]
  }
  {% endschema %}
  