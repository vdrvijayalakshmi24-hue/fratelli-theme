{% comment %}
  sections/first-video-and-content-duplicate-2.liquid
  - Duplicate of first-video-and-content-duplicate with all classnames / ids / selectors renamed (prefix: dup2- / jason-dup2)
  - Canvas-based video scrub section + content.
  - VIDEO SRC unchanged from provided code (Vineyards_Drone_Mobile.mp4).
  - TRACK_VH = 250 (section height).
  - STEP = 1/30 (30 fps).
  - Schema max_blocks: 1.
{% endcomment %}

<section id="dup2-video-section-{{ section.id }}" class="dup2-video-section" data-section-id="{{ section.id }}">
    <style>
      /* ---------- Layout / scrub section ---------- */
      .dup2-vd-wrapper {
        position: relative;
        height: 200vh; /* TRACK_VH */
        width: 100%;
        overflow: visible;
        box-sizing: border-box;
        background: #000;
      }
  
      .dup2-vd-pin {
        position: absolute; /* JS toggles absolute/fixed for reliable pin */
        top: 0;
        left: 0;
        right: 0;
        height: 100vh;
        width: 100%;
        z-index: 0;
        overflow: hidden;
        display: block;
        background: #000;
      }
  
      .dup2-vd-canvas {
        width: 100%;
        height: 100%;
        display: block;
        object-fit: cover;
        background: #000;
        image-rendering: auto;
      }
  
      .dup2-vd-video-decoder {
        position: absolute;
        opacity: 0;
        pointer-events: none;
        width: 1px;
        height: 1px;
        left: -9999px;
        top: -9999px;
      }
  
      /* spacer to ensure page can scroll */
      .dup2-vd-spacer { height: 1px; }
  
      /* ---------- Content area ---------- */
      .dup2-video-content {
        position: relative;
        z-index: 10;
        box-sizing: border-box;
        width: 100%;
        overflow: hidden;
        padding: 0 1.5rem;
      }
  
      .jason-dup2 {
        position: relative;
        z-index: 10;
        margin-top: 5rem;
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        overflow-x: hidden;
        width: 100vw;
        box-sizing: border-box;
        color: #FFFFF8;
        transform: translateY(40px);
        opacity: 0;
      }
  
      @media (min-width: 1024px) { .jason-dup2 { flex-direction: row; padding-left: 10rem; } }
  
      .jason-dup2-content { max-width: 56rem; margin-bottom: 2.5rem; }
  
      .jason-dup2 h1 {
        margin-top: 6rem;
        font-family: "Utile", sans-serif;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
        color: #F4CF80;
        font-size: 44px;
      }
  
      .jason-dup2 h2 {
        font-family: "Playfair Display", serif;
        margin-bottom: 1.75rem;
        padding-right: 5rem;
        color: #FFFFF8;
        font-size: 32px;
        font-style: italic;
      }
  
      .jason-dup2 p {
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        padding-right: 7rem;
        color: #FFFFF8;
        font-size: 20px;
      }
  
      .explore-btn-dup2 {
        background: #fff;
        color: #000;
        border: none;
        padding: 0.625rem 1.25rem;
        border-radius: 20px;
        font-weight: 600;
        cursor: pointer;
      }
  
      .content-1-dup2 {
        position: relative;
        display: block;
        background: linear-gradient(0deg, #34461A 74.46%, rgba(0, 0, 0, 0) 100%);
        -webkit-mask-image: linear-gradient(to bottom, transparent 0%, black 30%, black 100%);
        mask-image: linear-gradient(to bottom, transparent 0%, black 30%, black 100%);
        box-sizing: border-box;
        padding: 0 2rem;
      }
  
      .full-image-dup2 { width: 100%; height: 100vh; object-fit: cover; display: block; }
    </style>
  
    <!-- Scrub section -->
    <section
      class="dup2-vd-wrapper"
      id="dup2-vd-wrapper-{{ section.id }}"
      data-track-vh="250"
      >
      <div class="dup2-vd-pin" id="dup2-vd-pin-{{ section.id }}">
        <canvas id="dup2-vd-canvas-{{ section.id }}" class="dup2-vd-canvas" role="img" aria-label="Video scrub"></canvas>
        <video
          id="dup2-vd-video-{{ section.id }}"
          class="dup2-vd-video-decoder"
          muted
          playsinline
          preload="auto"
          webkit-playsinline
          x-webkit-airplay="allow"
          disablePictureInPicture
          loop
        >
          <source src="https://cdn.shopify.com/videos/c/o/v/9d0d7db685a0498da3add0992dd7b8ea.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      </div>
      <div class="dup2-vd-spacer" aria-hidden="true"></div>
    </section>
  
    <!-- Content area -->
    <section class="dup2-video-content content-1-dup2" id="dup2-video-content-{{ section.id }}">
      <div class="jason-dup2" id="jason-dup2-{{ section.id }}">
        <div class="jason-dup2-content">
          <h1 id="jason-dup2-h1-{{ section.id }}">Explore Range of Fratelli</h1>
          <h2 id="jason-dup2-h2-{{ section.id }}">From Akluj's Soil</h2>
          <p id="jason-dup2-p-{{ section.id }}">Their hands don't just plant vines. they planted a vision. they dont dont follow europe. they carved india into every bottle.</p>
          <div style="margin-top: 1.25rem;"><button type="button" class="explore-btn-dup2" id="jason-dup2-btn-{{ section.id }}">Explore</button></div>
        </div>
      </div>
    </section>
  
    <script>
      (function () {
        var sectionId = '{{ section.id }}';
  
        /* Video scrub (dup2 selectors) */
        (function videoScrubDup2() {
          var wrapper = document.getElementById('dup2-vd-wrapper-' + sectionId);
          var pin = document.getElementById('dup2-vd-pin-' + sectionId);
          var canvas = document.getElementById('dup2-vd-canvas-' + sectionId);
          var video = document.getElementById('dup2-vd-video-' + sectionId);
          if (!wrapper || !pin || !canvas || !video) return;
  
          var ctx = canvas.getContext('2d', { alpha: false, desynchronized: true });
          var duration = 0, startY = 0, endY = 0, seeking = false, pending = null, rAF = 0;
          function clamp(v,a,b){return Math.min(b,Math.max(a,v));}
          function setAbsoluteAt(y){ pin.style.position='absolute'; pin.style.top=y+'px'; pin.style.left='0'; pin.style.right='0'; pin.style.height='100vh'; pin.style.width='100%'; }
          function setFixedTop(){ pin.style.position='fixed'; pin.style.top='0'; pin.style.left='0'; pin.style.right='0'; pin.style.height='100vh'; pin.style.width='100%'; }
          function updatePin(){ var rect=wrapper.getBoundingClientRect(); var vh=window.innerHeight||document.documentElement.clientHeight; if(rect.top>0){setAbsoluteAt(0);return;} if(rect.bottom<=vh){setAbsoluteAt(wrapper.offsetHeight-vh);return;} setFixedTop(); }
          function measure(){ var rect=wrapper.getBoundingClientRect(); var pageY=window.pageYOffset||document.documentElement.scrollTop||0; startY=pageY+rect.top; endY=startY+wrapper.offsetHeight-window.innerHeight; updatePin(); }
          function draw(){ try{ ctx.drawImage(video,0,0,canvas.width,canvas.height);}catch(e){} }
          function doSeek(t){ seeking=true; try{ if(typeof video.fastSeek==='function') video.fastSeek(t); else video.currentTime=t; }catch(e){ seeking=false; } }
          function onSeeked(){ draw(); if(pending!=null){ var next=pending; pending=null; doSeek(next);} else { seeking=false; } }
          function onScrollTick() {
            rAF = 0;
            var pageY = window.pageYOffset || document.documentElement.scrollTop || 0;
            var prog = (pageY - startY) / Math.max(1, endY - startY);
            var p = clamp(prog, 0, 1);
            var tRaw = p * duration;
            var STEP = 1/30;
            var t = clamp(Math.round(tRaw / STEP) * STEP, 0, Math.max(0, duration - 1e-6));
            if (!seeking) {
              doSeek(t);
            } else {
              pending = t;
            }
            updatePin();
          }
          function onScroll() { 
            if (!duration) return; 
            if (!rAF) {
              rAF = requestAnimationFrame(onScrollTick);
            }
          }
          function onResize(){ canvas.width=video.videoWidth||canvas.clientWidth||window.innerWidth; canvas.height=video.videoHeight||canvas.clientHeight||window.innerHeight; measure(); draw(); }
          function onLoadedMeta() {
            duration = video.duration || 0;
            console.log('Video duration:', duration, 'seconds');
            onResize();
            
            // Initial seek to start
            doSeek(0);
            
            // Try to preload by playing and pausing
            var playPromise = video.play();
            if (playPromise !== undefined) {
              playPromise.then(_ => {
                console.log('Video preloaded, pausing...');
                video.pause();
              }).catch(e => {
                console.log('Auto-play prevented, but scrubbing should still work');
              });
            }
          }
          video.addEventListener('loadedmetadata', onLoadedMeta);
          video.addEventListener('seeked', onSeeked);
          window.addEventListener('scroll', onScroll, { passive: true });
          window.addEventListener('resize', onResize);
          
          if (video.readyState >= 1) onLoadedMeta();
          else try { video.load(); } catch (e) {}
  
          // Initial measurements with retry
          setTimeout(measure, 50);
          setTimeout(function(){ if (!endY || endY === 0) measure(); }, 300);
  
          // Cleanup function for event listeners
          function cleanup() {
            try { video.removeEventListener('loadedmetadata', onLoadedMeta); } catch(e) {}
            try { video.removeEventListener('loadeddata', onLoadedMeta); } catch(e) {}
            try { video.removeEventListener('canplay', onLoadedMeta); } catch(e) {}
            try { video.removeEventListener('seeked', onSeeked); } catch(e) {}
            try { window.removeEventListener('scroll', onScroll); } catch(e) {}
            try { window.removeEventListener('resize', onResize); } catch(e) {}
            if (rAF) cancelAnimationFrame(rAF);
          }
  
          // Shopify section events for theme editor
          if (window.Shopify && window.Shopify.designMode) {
            window.addEventListener('shopify:section:unload', function () { cleanup(); });
            window.addEventListener('shopify:section:load', function () { setTimeout(measure, 50); });
          }
          
          // Page lifecycle events
          window.addEventListener('pagehide', cleanup);
          window.addEventListener('beforeunload', cleanup);
        })();
  
        /* Content GSAP (dup2 selectors) */
        (function contentGSAPDup2(){
          var contentSection = document.getElementById('dup2-video-content-' + sectionId); if(!contentSection) return;
          var jasonDup2 = contentSection.querySelector('#jason-dup2-' + sectionId) || contentSection.querySelector('.jason-dup2');
          var content1 = contentSection.classList.contains('content-1-dup2') ? contentSection : contentSection.querySelector('.content-1-dup2') || contentSection;
          var hasImage = !!contentSection.querySelector('.full-image-dup2');
          function loadScript(src){ return new Promise(function(resolve,reject){ if(document.querySelector('script[src="'+src+'"]')) return resolve(); var s=document.createElement('script'); s.src=src; s.onload=resolve; s.onerror=reject; document.head.appendChild(s); }); }
          var GSAP_CDN = "https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js";
          var SCROLLTRIGGER_CDN = "https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js";
          function init(){ if(!window.gsap||!window.ScrollTrigger) return console.warn('GSAP/ScrollTrigger not available for content animation.'); gsap.registerPlugin(ScrollTrigger); var initialMargin = hasImage?'-15vh':'-62vh'; try{ content1.style.marginTop = initialMargin;}catch(e){} try{ gsap.set(jasonDup2, { y:40, opacity:0 }); }catch(e){}
            try{ gsap.timeline({ scrollTrigger:{ trigger: content1, start: 'top 90%', end: '100% center', scrub: true } }); }catch(e){}
            try{ gsap.to(jasonDup2, { y:0, opacity:1, duration:1, ease:'power1.inOut', scrollTrigger:{ trigger: content1, start:'top 90%', end:'100% center', scrub:2 } }); }catch(e){ console.warn('jasonDup2 animation error', e); }
          }
          if(window.gsap && window.ScrollTrigger){ init(); }else{ loadScript(GSAP_CDN).then(function(){ return loadScript(SCROLLTRIGGER_CDN); }).then(function(){ setTimeout(init,40); }).catch(function(err){ console.error('Failed to load GSAP for content animation', err); }); }
        })();
      })();
    </script>
  
    {% schema %}
    {
      "name": "Duplicate Video Copy",
      "settings": [],
      "blocks": [],
      "max_blocks": 1,
      "presets": [ { "name": "Duplicate Video Copy" } ]
    }
    {% endschema %}
  </section>
  