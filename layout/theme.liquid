<!doctype html>

<html class="no-js" lang="{{ shop.locale }}">
  <head>
    <meta charset="utf-8"> 
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="theme-color" content="{{ settings.accent_color }}">
    <meta name="facebook-domain-verification" content="f7cq4hq8kdks12wuzcbj23u9wkagan" />

    <title>
      {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
    </title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | img_url: '96x' }}" type="image/png">
    {%- endif -%}

    {% render 'social-meta-tags' %}
    {% render 'css-variables' %}

    {{ content_for_header }}
  {% include 'tipo.booking.script' %}
  
    <!-- GSAP Animation Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <script>
      // Initialize GSAP and register plugins
      if (window.gsap) {
        try {
          gsap.registerPlugin(ScrollTrigger);
          
          // Create global GSAP utilities if they don't exist
          window.FratelliGSAP = window.FratelliGSAP || {};
          
          // Common GSAP animations
          window.FratelliGSAP.animateFadeIn = function(element, delay = 0, y = 40, duration = 1) {
            if (!element) return null;
            
            gsap.set(element, { y: y, opacity: 0 });
            return gsap.to(element, {
              y: 0,
              opacity: 1,
              duration: duration,
              delay: delay,
              ease: "power1.inOut",
              scrollTrigger: {
                trigger: element,
                start: "top 90%",
                end: "100% center",
                scrub: 2
              }
            });
          };
          
          // Video scrubber utility
          window.FratelliGSAP.initVideoScrub = function(options) {
            const {
              wrapperId,
              pinId,
              canvasId,
              videoId,
              onReady = () => {},
              onUpdate = () => {}
            } = options;
            
            const wrapper = document.getElementById(wrapperId);
            const pin = document.getElementById(pinId);
            const canvas = document.getElementById(canvasId);
            const video = document.getElementById(videoId);
            
            if (!wrapper || !pin || !canvas || !video) {
              console.warn('Video scrub elements not found');
              return null;
            }
            
            const ctx = canvas.getContext('2d', { alpha: false, desynchronized: true });
            let duration = 0;
            let startY = 0;
            let endY = 0;
            let seeking = false;
            let pending = null;
            let rAF = 0;
            
            function clamp(v, a, b) { return Math.min(b, Math.max(a, v)); }
            
            function setAbsoluteAt(y) {
              pin.style.position = 'absolute';
              pin.style.top = y + 'px';
              pin.style.left = '0';
              pin.style.right = '0';
              pin.style.height = '100vh';
              pin.style.width = '100%';
            }
            
            function updatePin() {
              const rect = wrapper.getBoundingClientRect();
              const vh = window.innerHeight || document.documentElement.clientHeight;
              if (rect.top > 0) return setAbsoluteAt(0);
              if (rect.bottom <= vh) return setAbsoluteAt(wrapper.offsetHeight - vh);
              
              pin.style.position = 'fixed';
              pin.style.top = '0';
              pin.style.left = '0';
              pin.style.right = '0';
              pin.style.height = '100vh';
              pin.style.width = '100%';
            }
            
            function measure() {
              const rect = wrapper.getBoundingClientRect();
              const pageY = window.pageYOffset || document.documentElement.scrollTop || 0;
              startY = pageY + rect.top;
              endY = startY + wrapper.offsetHeight - window.innerHeight;
              updatePin();
            }
            
            function draw() {
              try { ctx.drawImage(video, 0, 0, canvas.width, canvas.height); } catch (e) {}
            }
            
            function doSeek(t) {
              seeking = true;
              try {
                if (typeof video.fastSeek === 'function') video.fastSeek(t);
                else video.currentTime = t;
              } catch (e) {
                seeking = false;
              }
            }
            
            function onSeeked() {
              draw();
              if (pending !== null) {
                const next = pending;
                pending = null;
                doSeek(next);
              } else {
                seeking = false;
              }
            }
            
            function onScrollTick() {
              rAF = 0;
              const pageY = window.pageYOffset || document.documentElement.scrollTop || 0;
              const prog = (pageY - startY) / Math.max(1, endY - startY);
              const p = clamp(prog, 0, 1);
              const tRaw = p * duration;
              const STEP = 1/30;
              const t = clamp(Math.round(tRaw / STEP) * STEP, 0, Math.max(0, duration - 1e-6));
              
              if (!seeking) doSeek(t);
              else pending = t;
              
              updatePin();
              onUpdate(p, t);
            }
            
            function onScroll() {
              if (!duration) return;
              if (!rAF) rAF = requestAnimationFrame(onScrollTick);
            }
            
            function onResize() {
              canvas.width = video.videoWidth || canvas.clientWidth || window.innerWidth;
              canvas.height = video.videoHeight || canvas.clientHeight || window.innerHeight;
              measure();
              draw();
            }
            
            function onLoadedMeta() {
              duration = video.duration || 0;
              if (duration === 0 || isNaN(duration) || !isFinite(duration)) {
                console.warn('Invalid video duration, using fallback');
                duration = 10; // Fallback duration in seconds
              }
              
              onResize();
              video.pause();
              doSeek(0);
              
              // Call onReady with video info
              onReady({ duration, video, canvas });
            }
            
            // Event listeners
            video.addEventListener('loadedmetadata', onLoadedMeta);
            video.addEventListener('seeked', onSeeked);
            window.addEventListener('scroll', onScroll, { passive: true });
            window.addEventListener('resize', onResize);
            
            // Initial setup
            if (video.readyState >= 1) onLoadedMeta();
            else video.load();
            
            // Cleanup function
            return function cleanup() {
              try { video.removeEventListener('loadedmetadata', onLoadedMeta); } catch(e) {}
              try { video.removeEventListener('seeked', onSeeked); } catch(e) {}
              try { window.removeEventListener('scroll', onScroll); } catch(e) {}
              try { window.removeEventListener('resize', onResize); } catch(e) {}
              if (rAF) cancelAnimationFrame(rAF);
            };
          };
          
          console.log('GSAP initialized with FratelliGSAP utilities');
          
        } catch (e) {
          console.error('Error initializing GSAP utilities:', e);
        }
      } else {
        console.warn('GSAP not available. Some animations may not work.');
      }
    </script>
    
    <link rel="stylesheet" href="{{ 'theme.css' | asset_url }}">
    <link rel="stylesheet" href="{{ 'custom-header.css' | asset_url }}" type="text/css">

    <script>
      // This allows to expose several variables to the global scope, to be used in scripts
      window.theme = {
        pageType: {{ request.page_type | json }},
        moneyFormat: {{ shop.money_format | json }},
        moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
        productImageSize: {{ settings.product_image_size | json }},
        searchMode: {{ settings.search_mode | json }},
        showPageTransition: {{ settings.show_page_transition | json }},
        showElementStaggering: {{ settings.show_element_staggering | json }},
        showImageZooming: {{ settings.show_image_zooming | json }}
      };

      window.routes = {
        rootUrl: {{ routes.root_url | json }},
        cartUrl: {{ routes.cart_url | json }},
        cartAddUrl: {{ routes.cart_add_url | json }},
        cartChangeUrl: {{ routes.cart_change_url | json }},
        searchUrl: {{ routes.search_url | json }},
        productRecommendationsUrl: {{ routes.product_recommendations_url | json }}
      };

      window.languages = {
        cartAddNote: {{ 'cart.general.add_note' | t | json }},
        cartEditNote: {{ 'cart.general.edit_note' | t | json }},
        productImageLoadingError: {{ 'product.slideshow.image_loading_error' | t | json }},
        productFormAddToCart: {% if product.template_suffix == 'pre-order' %}{{ 'product.form.pre_order' | t | json }}{% else %}{{ 'product.form.add_to_cart' | t | json }}{% endif %},
        productFormUnavailable: {{ 'product.form.unavailable' | t | json }},
        productFormSoldOut: {{ 'product.form.sold_out' | t | json }},
        shippingEstimatorOneResult: {{ 'cart.shipping_estimator.one_result_title' | t | json }},
        shippingEstimatorMoreResults: {{ 'cart.shipping_estimator.more_results_title' | t | json }},
        shippingEstimatorNoResults: {{ 'cart.shipping_estimator.no_results_title' | t | json }}
      };

      window.lazySizesConfig = {
        loadHidden: false,
        hFac: 0.5,
        expFactor: 2,
        ricTimeout: 150,
        lazyClass: 'Image--lazyLoad',
        loadingClass: 'Image--lazyLoading',
        loadedClass: 'Image--lazyLoaded'
      };

      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
      document.documentElement.style.setProperty('--window-height', window.innerHeight + 'px');

      // We do a quick detection of some features (we could use Modernizr but for so little...)
      (function() {
        document.documentElement.className += ((window.CSS && window.CSS.supports('(position: sticky) or (position: -webkit-sticky)')) ? ' supports-sticky' : ' no-supports-sticky');
        document.documentElement.className += (window.matchMedia('(-moz-touch-enabled: 1), (hover: none)')).matches ? ' no-supports-hover' : ' supports-hover';
      }());
    </script>

    <script src="{{ 'lazysizes.min.js' | asset_url }}" async></script>

    {%- if template == 'customers/addresses' -%}
      <script src="{{ 'shopify_common.js' | shopify_asset_url }}" defer></script>
      <script src="{{ 'customer_area.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <script src="https://cdn.polyfill.io/v3/polyfill.min.js?unknown=polyfill&features=fetch,Element.prototype.closest,Element.prototype.remove,Element.prototype.classList,Array.prototype.includes,Array.prototype.fill,Object.assign,CustomEvent,IntersectionObserver,IntersectionObserverEntry,URL" defer></script>
    <script src="{{ 'libs.min.js' | asset_url }}" defer></script>
    <script src="{{ 'theme.min.js' | asset_url }}" defer></script>
    <script src="{{ 'custom.js' | asset_url }}" defer></script>

    <script>
      (function () {
        window.onpageshow = function() {
          if (window.theme.showPageTransition) {
            var pageTransition = document.querySelector('.PageTransition');

            if (pageTransition) {
              pageTransition.style.visibility = 'visible';
              pageTransition.style.opacity = '0';
            }
          }

          // When the page is loaded from the cache, we have to reload the cart content
          document.documentElement.dispatchEvent(new CustomEvent('cart:refresh', {
            bubbles: true
          }));
        };
      })();
    </script>
 

    {% render 'microdata-schema' %}
  </head>

  {%- capture classes -%}features--heading-{{ settings.heading_size }}{%- endcapture -%}

  {%- if settings.uppercase_heading -%}
    {%- assign classes = classes | append: ' features--heading-uppercase' -%}
  {%- endif -%}

  {%- if settings.product_show_price_on_hover -%}
    {%- assign classes = classes | append: ' features--show-price-on-hover' -%}
  {%- endif -%}

  {%- if settings.show_page_transition -%}
    {%- assign classes = classes | append: ' features--show-page-transition' -%}
  {%- endif -%}

  {%- if settings.show_button_transition -%}
    {%- assign classes = classes | append: ' features--show-button-transition' -%}
  {%- endif -%}

  {%- if settings.show_image_zooming -%}
    {%- assign classes = classes | append: ' features--show-image-zooming' -%}
  {%- endif -%}

  {%- if settings.show_element_staggering -%}
    {%- assign classes = classes | append: ' features--show-element-staggering' -%}
  {%- endif -%}

  <body class="prestige--v4 {{ classes }} {% if template.directory %}template-{{ template.directory | handle }}{% endif %} template-{{ template.name | handle }} {% unless request.design_mode %}age-gate-loading{% endunless %}" data-age-gate-verified="{% if request.design_mode %}true{% else %}false{% endif %}">
    <a class="PageSkipLink u-visually-hidden" href="#main">{{ 'header.navigation.skip_to_content' | t }}</a>
    <span class="LoadingBar"></span>
    <div class="PageOverlay"></div>

    {%- if settings.show_page_transition -%}
      <div class="PageTransition"></div>
    {%- endif -%}

    {% section 'popup' %}
    {% section 'sidebar-menu' %}

    {%- if template != 'cart' -%}
      {% render 'cart-drawer' %}
    {%- endif -%}

    <div class="PageContainer">
      {% section 'announcement' %}
      {% section 'header' %}
      <div id="age-gate-section" style="display: none;">
      {% section 'age-gate' %}
      </div>
      
      <div id="page-content" style="display: none;">
        <main id="main" role="main">
          {{ content_for_layout }}
        </main>
        {% section 'footer' %}
      </div>
    </div>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const ageVerified = localStorage.getItem('agegateConfirmed_v1') === 'true';
        const body = document.body;
        const pageContent = document.getElementById('page-content');
        const ageGateSection = document.getElementById('age-gate-section');

        
        if (ageVerified || body.classList.contains('template-password')) {
          // If age is verified or it's the password page, show content and hide age gate
          if (pageContent) pageContent.style.display = 'block';
          if (ageGateSection) ageGateSection.style.display = 'none';
          body.classList.remove('age-gate-loading');
          body.setAttribute('data-age-gate-verified', 'true');
        } else {
          // Show age gate and hide content
          if (pageContent) pageContent.style.display = 'none';
          if (ageGateSection) ageGateSection.style.display = 'block';
          body.classList.add('age-gate-loading');
        }
      });
    </script>
    {% render 'bookthatapp-widgets' %}
  </body>
</html>
